#!/usr/bin/python3
#coding=utf-8

from __future__ import print_function
from paho.mqtt.client import Client as MqttClient
from pyModbusTCP.client import ModbusClient
from pyModbusTCP import utils
import logging
import time
import sys
import os


# modbus tcp server
MODBUS_HOST = 'mbusd'
MODBUS_PORT = 502

# mqtt broker
MQTT_HOST = 'mosquitto'
MQTT_PORT = 1883


def publish(mqtt, topic, payload):
    logging.info('[mqtt] > %s = %s', topic, payload)
    mqtt.publish(topic, payload)


def main():
    # create mqtt client
    mqtt = MqttClient('pzem004t3')
    mqtt.connect(MQTT_HOST, port=MQTT_PORT)
    mqtt.loop_start()

    # create modbus client
    modbus = ModbusClient(host=MODBUS_HOST, port=MODBUS_PORT, auto_open=True)

    # last sent time
    voltage = list()
    current = list()
    power = list()
    freq = list()
    pf = list()
    t = 0

    # endless loop
    while True:
        time.sleep(0.25)

        data = modbus.read_input_registers(0, 10)

        #print(data)
        if not data:
            continue

        voltage.append(data[0] / 10.0)
        current.append(utils.word_list_to_long(data[1:3], big_endian=False)[0] / 1000.0)
        power.append(utils.word_list_to_long(data[3:5], big_endian=False)[0] / 10.0)
        # energy = utils.word_list_to_long(data[5:7], big_endian=False)[0]
        freq.append(data[7] / 10.0)
        pf.append(data[8] / 100.0)
        # alarm = False if data[9] == 0 else True

        ct = time.time()

        if ct < t:
            continue

        publish(mqtt, 'pzem/voltage', '%.1f' % (sum(voltage) / len(voltage),))
        publish(mqtt, 'pzem/current', '%.3f' % (sum(current) / len(current),))
        publish(mqtt, 'pzem/power', '%.1f' % (sum(power) / len(power),))
        publish(mqtt, 'pzem/frequency', '%.1f' % (sum(freq) / len(freq),))
        publish(mqtt, 'pzem/powerfactor', '%.2f' % (sum(pf) / len(pf),))

        voltage = list()
        current = list()
        power = list()
        freq = list()
        pf = list()
        t = ct + 60


if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(message)s')

    if os.getenv('MQTT_HOST') is not None:
        MQTT_HOST = os.getenv('MQTT_HOST')

    if os.getenv('MQTT_PORT') is not None:
        MQTT_PORT = int(os.getenv('MQTT_PORT'))

    if os.getenv('MODBUS_HOST') is not None:
        MODBUS_HOST = os.getenv('MODBUS_HOST')

    if os.getenv('MODBUS_PORT') is not None:
        MODBUS_PORT = int(os.getenv('MODBUS_PORT'))

    main()
