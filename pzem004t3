#!/usr/bin/python3
# -*- coding: utf-8 -*-

from paho.mqtt.client import Client as MqttClient
from pyModbusTCP.client import ModbusClient
from pyModbusTCP import utils
import logging
import time
import sys
import os


# modbus tcp server
MODBUS_HOST = 'mbusd'
MODBUS_PORT = 502

# mqtt broker
MQTT_HOST = 'mosquitto'
MQTT_PORT = 1883
MQTT_TOPIC = 'pzem'


def terminate(signum, frame):
    sys.exit(0)


def main():
    # create mqtt client
    mqtt = MqttClient('pzem004t3')
    mqtt.enable_logger(logging.getLogger('mqtt'))
    mqtt.connect_async(MQTT_HOST, port=MQTT_PORT, keepalive=30)
    mqtt.loop_start()

    # create modbus client
    modbus = ModbusClient(host=MODBUS_HOST, port=MODBUS_PORT, auto_open=True)

    # last sent time
    voltage = list()
    current = list()
    power = list()
    freq = list()
    pf = list()
    t = 0

    # endless loop
    while True:
        time.sleep(0.25)

        data = modbus.read_input_registers(0, 10)

        logging.debug('modbus raw data: %s', repr(data))
        if not data:
            continue

        voltage.append(data[0] / 10.0)
        current.append(utils.word_list_to_long(data[1:3], big_endian=False)[0] / 1000.0)
        power.append(utils.word_list_to_long(data[3:5], big_endian=False)[0] / 10.0)
        # energy = utils.word_list_to_long(data[5:7], big_endian=False)[0]
        freq.append(data[7] / 10.0)
        pf.append(data[8] / 100.0)
        # alarm = False if data[9] == 0 else True

        now = time.monotonic()

        if now < t:
            continue

        mqtt.publish(MQTT_TOPIC + '/voltage', '%.1f' % (sum(voltage) / len(voltage),))
        mqtt.publish(MQTT_TOPIC + '/current', '%.3f' % (sum(current) / len(current),))
        mqtt.publish(MQTT_TOPIC + '/power', '%.1f' % (sum(power) / len(power),))
        mqtt.publish(MQTT_TOPIC + '/frequency', '%.1f' % (sum(freq) / len(freq),))
        mqtt.publish(MQTT_TOPIC + '/powerfactor', '%.2f' % (sum(pf) / len(pf),))

        voltage *= 0
        current *= 0
        power *= 0
        freq *= 0
        pf *= 0
        t = now + 60


if __name__ == "__main__":
    if os.getenv('DEBUG') is not None:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO

    logging.basicConfig(stream=sys.stdout, level=loglevel,
                        format='%(asctime)s %(levelname)s [%(name)s] %(message)s')

    if os.getenv('MQTT_HOST') is not None:
        MQTT_HOST = os.getenv('MQTT_HOST')

    if os.getenv('MQTT_PORT') is not None:
        MQTT_PORT = int(os.getenv('MQTT_PORT'))

    if os.getenv('MQTT_TOPIC') is not None:
        MQTT_TOPIC = os.getenv('MQTT_TOPIC')

    if os.getenv('MODBUS_HOST') is not None:
        MODBUS_HOST = os.getenv('MODBUS_HOST')

    if os.getenv('MODBUS_PORT') is not None:
        MODBUS_PORT = int(os.getenv('MODBUS_PORT'))

    logging.info('Starting pzem004t3, modbus %s:%d, mqtt %s:%d topic /%s',
                 MODBUS_HOST, MODBUS_PORT, MQTT_HOST, MQTT_PORT, MQTT_TOPIC)

    if os.getpid() == 1:
        signal.signal(signal.SIGINT, terminate)
        signal.signal(signal.SIGTERM, terminate)
        signal.signal(signal.SIGQUIT, terminate)

    main()
